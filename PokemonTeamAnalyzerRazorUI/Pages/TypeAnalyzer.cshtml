@page
@model PokemonTeamAnalyzerRazorUI.Pages.TypeAnalyzerModel
@{
    ViewData["Title"] = "Type Analyzer";
}

<h1>Type Analyzer</h1>


<section id="pokemon-search-boxes">

    @await Component.InvokeAsync("PokemonSearchBox")

</section>



<button id="add-pokemon-button">Add Pokemon</button>


<button id="analyze-button">
    Analyze
</button>

<section id="results">



</section> 


<script>

    let analyzeButton = document.getElementById("analyze-button");
    let results = document.getElementById("results");

    let pokemonSearchBoxes = document.getElementById("pokemon-search-boxes");
    let addPokemonButton = document.getElementById("add-pokemon-button");
    let totalPokemonSearches = 1;

    function GetPokemonNames() {

        let pkmnNames = [];
        let pokemonSearchBoxes = document.getElementsByClassName("PokemonSearchBox");
        console.log(pokemonSearchBoxes);

        for (const searchBox of pokemonSearchBoxes) {

            console.log(searchBox);

            if (searchBox.value != "" && searchBox.value != null) {
                pkmnNames.push(searchBox.value);
            }
            
        }

        return pkmnNames;

    }

    function GetTypeAnalysisResultsAndUpdatePage() {

        console.log("Getting type analysis");

        let pkmnNames = GetPokemonNames();
        console.log(pkmnNames);

        $.ajax({
            dataType: 'html',
            url: 'Shared/TypeAnalysis',
            type: 'GET',
            data: {
                pokemonNames: JSON.stringify(pkmnNames)
            },
            success: function (data) {
                console.log("success");
                results.innerHTML = data;
            },
            error: function (e) {
                console.log("failure")
                alert("Error: " + e);
            }

        });

    }

    function ConfigureLiveSearchSection(liveSearchResultsContainer) {

        var liveSearchOptions = liveSearchResultsContainer.getElementsByClassName("LiveSearchOption");
        for (const option of liveSearchOptions) {
            option.addEventListener("mousedown", OnLiveSearchOptionClick, false);
            option.pokemonName = option.dataset.name;
        }

    }

    function ConfigureLiveSearchSections() {

        var liveSearchOptions = document.getElementsByClassName("LiveSearchOption");
        for (const option of liveSearchOptions) {
            option.addEventListener("mousedown", OnLiveSearchOptionClick, false);
            option.pokemonName = option.dataset.name;
        }

    }

    function ConfigurePokemonSearchBoxes() {

        var searchBoxes = document.getElementsByClassName("PokemonSearchBox");
        for (const searchBox of searchBoxes) {

            searchBox.addEventListener("focusin", OnPokemonSearchFocusIn);
            searchBox.addEventListener("focusout", OnPokemonSearchFocusOut);

            searchBox.addEventListener("input", OnPokemonSearchBoxInputChanged);

        }

    }

    function OnPokemonSearchBoxInputChanged(evt) {

        var pokemonSearchContainer = evt.currentTarget.parentElement;

        UpdateLiveSearch( pokemonSearchContainer );

    }

    function OnLiveSearchOptionClick(evt) {

        console.log("Clicked");
        var pokemonSearchBox = evt.currentTarget.parentElement.parentElement.getElementsByClassName("PokemonSearchBox");
        var liveSearchResultsContainer = evt.currentTarget.parentElement;
        pokemonSearchBox[0].value = evt.currentTarget.pokemonName;
        liveSearchResultsContainer.innerHTML = "";

    }


    function AddPokemonSearchBox() {

        

        $.ajax({
            dataType: 'html',
            url: '?handler=CallPokemonSearchBoxViewComponent',
            type: 'GET',
            data: {
            },
            success: function (data) {
                console.log("success");
                pokemonSearchBoxes.children[pokemonSearchBoxes.children.length-1].insertAdjacentHTML("afterend", data);

                ConfigurePokemonSearchBoxes();
                ConfigureLiveSearchSections();
                

            },
            error: function (e) {
                console.log("failure")
                alert("Error: " + e);
            }

        });

        
        

    }


    function UpdateLiveSearch(PokemonSearchContainer) {

        var pokemonSearchBox = PokemonSearchContainer.getElementsByClassName("PokemonSearchBox");
        var liveSearchResultsContainer = PokemonSearchContainer.getElementsByClassName("LiveSearchResults");

        console.log("Updating live search");

        $.ajax({
            dataType: 'html',
            url: '?handler=CallPokemonSearchViewComponent',
            type: 'GET',
            data: {
                searchString: pokemonSearchBox[0].value
            },
            success: function (data) {
                console.log("success");
                liveSearchResultsContainer[0].innerHTML = data;
                ConfigureLiveSearchSection(liveSearchResultsContainer[0]);
            },
            error: function (e) {
                console.log("failure")
                alert("Error: " + e);
            }

        });

    }

    function OnPokemonSearchFocusIn(evt) {

        var liveSearchResults = evt.currentTarget.parentElement.getElementsByClassName("LiveSearchResults");

        for (const searchResults of liveSearchResults) {
            searchResults.classList.remove("Hide");
        }

    }

    function OnPokemonSearchFocusOut(evt){

        var liveSearchResults = evt.currentTarget.parentElement.getElementsByClassName("LiveSearchResults");

        for (var searchResults of liveSearchResults) {
            searchResults.classList.add("Hide");
        }


    }

    analyzeButton.addEventListener("click", GetTypeAnalysisResultsAndUpdatePage);


    addPokemonButton.addEventListener("click", () => {

        if (totalPokemonSearches < 6) {

            totalPokemonSearches += 1;
            AddPokemonSearchBox();

        }

    });

    ConfigurePokemonSearchBoxes();

</script>