@page
@model PokemonTeamAnalyzerRazorUI.Pages.TypeAnalyzerModel
@{
    ViewData["Title"] = "Type Analyzer";
}

<section id="type-analyzer-main">

    <section id="type-analyzer-header">

        <h1>Type Analyzer</h1>

        <section id="pokemon-search-boxes">

            <div class="LiveSearchContainer">
                <input class="PokemonSearchBox" id="pokemon-search-box" type="text" placeholder="Pokemon Name"/>
                <div class="LiveSearchResults Hide" id="live-search">
                </div>
            </div>

        </section>


        <div id="type-analyzer-button-container">

            <button class="TypeAnalyzerButton" id="add-pokemon-button">Add Pokemon</button>

            <button class="TypeAnalyzerButton" id="analyze-button">
                Analyze
            </button>

        </div>

    </section>

    <div id="selected-pokemon">
    </div>

    <section id="results">
    </section>

</section>

<script>

    let analyzeButton = document.getElementById("analyze-button");
    let results = document.getElementById("results");
    let tooltipsContainer = document.getElementsByClassName("tooltips")[0];

    let liveSearchResultsContainer = document.getElementById("live-search");

    let selectedPokemonContainer = document.getElementById("selected-pokemon");
    let pokemonSearchBox = document.getElementById("pokemon-search-box");

    let pokemonSearchBoxes = document.getElementById("pokemon-search-boxes");
    let addPokemonButton = document.getElementById("add-pokemon-button");
    let totalSelectedPokemon = 0;

    function GetPokemonName() {

        return pokemonSearchBox.value;

    }

    function GetSelectedPokemonNames() {

        let pkmnNames = [];
        let selectedPokemonTiles = document.getElementsByClassName("TypeAnalysisPokemonTile");

        for (const selectedPokemon of selectedPokemonTiles) {

            pkmnNames.push(selectedPokemon.dataset.pokemonname);
            
        }

        return pkmnNames;

    }

    function GetTypeAnalysisResultsAndUpdatePage() {

        let pkmnNames = GetSelectedPokemonNames();

        $.ajax({
            dataType: 'html',
            url: '?handler=CallTypeAnalysisViewComponent',
            type: 'GET',
            data: {
                pokemonNames: JSON.stringify(pkmnNames)
            },
            success: function (data) {

                results.innerHTML = data;

            },
            error: function (e) {
                console.log("failure")
                alert("Error: " + e);
            }

        });

    }

    function GetTypeFactorTooltipAndUpdatePage(typeQuantityContainer) {

        let typeId = typeQuantityContainer.dataset.typeid;
        let effectiveness = typeQuantityContainer.dataset.effectiveness;

        let pkmnNames = GetPokemonNames();

        $.ajax({
            dataType: 'html',
            url: '?handler=CallTypeFactorTooltipViewComponent',
            type: 'GET',
            data: {
                pokemonNames: JSON.stringify(pkmnNames),
                typeId: typeId,
                effectivenessString: effectiveness
            },
            success: function (data) {
                tooltipsContainer.innerHTML = data;

            },
            error: function (e) {
                console.log("failure")
                alert("Error: " + e);
            }

        });

    }

    function RemoveTooltip(typeQuantityContainer) {

        tooltipsContainer.innerHTML = "";

    }

    function ConfigureLiveSearchSection(liveSearchResultsContainer) {

        var liveSearchOptions = liveSearchResultsContainer.getElementsByClassName("LiveSearchOption");
        for (const option of liveSearchOptions) {
            option.addEventListener("mousedown", OnLiveSearchOptionClick, false);
            option.pokemonName = option.dataset.name;
        }

    }

    //Configure live search result option mousedown event handlers so they can be selected
    function ConfigureLiveSearchSections() {

        var liveSearchOptions = document.getElementsByClassName("LiveSearchOption");
        for (const option of liveSearchOptions) {
            option.addEventListener("mousedown", OnLiveSearchOptionClick, false);
            option.pokemonName = option.dataset.name;
        }

    }

    function OnPokemonSearchBoxInputChanged(evt) {

        var pokemonSearchContainer = evt.currentTarget.parentElement;

        UpdateLiveSearch( pokemonSearchContainer );

    }

    function OnLiveSearchOptionClick(evt) {

        pokemonSearchBox.value = "";
        liveSearchResultsContainer.innerHTML = "";

        AddTypeAnalysisPokemon(evt.currentTarget.dataset.name);

    }

    //Performs AJAX request to add the TypeAnalysisPokemonSelection view component to the page
    function AddTypeAnalysisPokemon(pkmnName) {

        $.ajax({
            dataType: 'html',
            url: '?handler=CallTypeAnalysisPokemonSelection',
            type: 'GET',
            data: {
                pokemonName: pkmnName
            },
            success: function (data) {

                if (data.replace(/\s/g, "")) {
                    selectedPokemonContainer.innerHTML += data;
                    ConfigureTypeAnalysisTileRemoveButtons();
                } else {

                    alert("Pokemon name was either incorrectly spelled or does not exist.");

                }

                
                
            },
            error: function (e) {
                console.log("failure")
                alert("Error: " + e);
            }

        });

    }


    function UpdateLiveSearch(PokemonSearchContainer) {

        var pokemonSearchBox = PokemonSearchContainer.getElementsByClassName("PokemonSearchBox");

        $.ajax({
            dataType: 'html',
            url: '?handler=CallPokemonSearchViewComponent',
            type: 'GET',
            data: {
                searchString: pokemonSearchBox[0].value
            },
            success: function (data) {
                console.log("success");
                liveSearchResultsContainer.innerHTML = data;
                ConfigureLiveSearchSection(liveSearchResultsContainer);

                if (!data.replace(/\s/g, "")) {
                    liveSearchResultsContainer.classList.add("Hide");
                } else {
                    if (liveSearchResultsContainer.classList.contains("Hide")) {
                        liveSearchResultsContainer.classList.remove("Hide");
                    }
                }

            },
            error: function (e) {
                console.log("failure")
                alert("Error: " + e);
            }

        });

    }

    //Check contents of live search and reveal/hide it
    function OnPokemonSearchFocusIn(evt) {

        var liveSearchResults = evt.currentTarget.parentElement.getElementsByClassName("LiveSearchResults");

        console.log(liveSearchResultsContainer);

        if (liveSearchResultsContainer.children.length > 0) {

            for (const searchResults of liveSearchResults) {
                searchResults.classList.remove("Hide");
            }

        }

    }

    //Hide live search results
    function OnPokemonSearchFocusOut(evt){

        var liveSearchResults = evt.currentTarget.parentElement.getElementsByClassName("LiveSearchResults");

        for (var searchResults of liveSearchResults) {
            searchResults.classList.add("Hide");
        }


    }

    //Configure each remove PokemonTiles button event handlers
    function ConfigureTypeAnalysisTileRemoveButtons() {

        let buttons = document.getElementsByClassName("RemoveButton");

        for (const button of buttons) {

            button.addEventListener("click", (evt) => {

                totalSelectedPokemon -= 1;
                evt.currentTarget.parentElement.remove();

            });

        }

    }

    analyzeButton.addEventListener("click", GetTypeAnalysisResultsAndUpdatePage);


    addPokemonButton.addEventListener("click", () => {

        if (totalSelectedPokemon < 6) {

            totalSelectedPokemon += 1;
            AddTypeAnalysisPokemon( GetPokemonName() );

        }

    });

    //Configure search box event handlers
    pokemonSearchBox.addEventListener("focusin", OnPokemonSearchFocusIn);
    pokemonSearchBox.addEventListener("focusout", OnPokemonSearchFocusOut);
    pokemonSearchBox.addEventListener("input", OnPokemonSearchBoxInputChanged);

</script>